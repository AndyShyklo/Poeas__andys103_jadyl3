jadyL & andyS -- 2025-04-30 11:30
  - Chat with Mr. Dillon about scheduling algorithm:
    - Make algorithm to schedule students first
    - Add seating for course limitations
    - Row of Student CSV data contains OSIS and course reqs
    - Row of Classes CSV data contains Course Code, Section #, Period, Seats, Room, Days
    - Elective rankings to be taken into account later
    - Use Recursion and possibly Stack object
    - May need to be rewritten in JS, if time allows (Google App Script)
    - Current uses 2D list, but can use 3D to read between student data in order to...
    - ... resolve impossible conflicts in schedules by shifting courses around through students <--- Goal

jadyL -- 2025-04-30 23:25
  - Made access methods for reading student and course CSV files
  - Created way to view impossible classes and existing course periods
  - Made new availability methods per student/class
  - Created sample data for student requests

andyS -- 2025-05-01 1:34
  - Started assigning courses with simple, most selective classes-algorithm
  - Made course comparing function with dictionaries

jadyL -- 2025-05-01 23:33
  - Remade possible schedule algorithm and allows classes to be shifted upwards
  - Made code work for double period compatability (10 --> 0)

jadyL -- 2025-05-01 11:40
  - add potential for partial schedules.

jadyL -- 2025-05-01 11:47
  - trying to translate string schedule

andyS -- 2025-05-01 11:48
  - fixed schedule proto-type, backup scheduler

jadyL -- 2025-05-04 15:22
  - the ghost of a better programmer possessed me in a Tour les Jours and I made my code better.
  - I got rid of the id put into the availability list
  - I added the student id to the recursion functions.
  - task 2 should be done

andyS -- 2025-05-05 1:34
  - fixed recursive function to return where a schedule conflict occured, and the status of the schedule
  - made function to put the schedule together in an accessable format
  - made 1D array of string with each student-class per row, if scheduled
  - made 2D array of schedules per student schedule, if scheduled or if not
  - allowed methods for specific users, not just general (overall, fixed formatting and added info statements)